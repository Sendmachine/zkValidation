var Validation=angular.module("Validation",[]);Validation.factory("validation",function($http,$rootScope,validationFn,appConfig){function Validation(){this.baseUrl=appConfig.validationUrl+"/"}Validation.prototype={runAfterFn:undefined,rules:undefined,setBaseUrl:function(url){this.baseUrl=url},getRules:function(ruleName){var self=this;return $http.get(self.baseUrl+ruleName,{cache:true}).then(function success(resp){self.rules=resp.data.validation},function error(){throw new Error("Validation: could not load rule <"+ruleName+">")}).then(function(){return self.runAfterFn?self.runAfterFn():null})},runAfter:function(fn){this.runAfterFn=fn},runValidation:function(fieldName,fieldValue,formInstance){var valid={isValid:undefined,errorMsg:""};var rules=this.rules;var lang=$rootScope.lang;if(!(rules&&rules[fieldName])){throw new Error("Validation: no rule found for field name <"+fieldName+">")}$.each(rules[fieldName],function(k,rule){if(rule.msg=="matches"){valid.isValid=validationFn[rule.msg](fieldValue,formInstance[rule.param].$modelValue||formInstance[rule.param])}else if(rule.param){valid.isValid=validationFn[rule.msg](fieldValue,rule.param)}else{valid.isValid=validationFn[rule.msg](fieldValue)}if(!valid.isValid&&lang.validation[rule.msg]){if(rule.msg=="matches"){valid.errorMsg=lang.validation[rule.msg].replace("%s",lang[rule.param])}else if(rule.param){valid.errorMsg=lang.validation[rule.msg].replace("%s",rule.param)}else{valid.errorMsg=lang.validation[rule.msg]}}return valid.isValid});return valid}};return function ValidationFactory(){return new Validation}});Validation.service("validationFn",function(appConfig){return{required:function(inp){return inp?true:false},min_length:function(inp,len){return inp?inp.length>=len:false},max_length:function(inp,len){return inp?inp.length<=len:true},exact_length:function(inp,len){return inp&&inp.length==len},matches:function(inp,field){return inp==field},numeric:function(inp){if(inp){return+inp?true:false}else{return true}},is_natural:function(inp){return+inp>=0},greater_than:function(inp,value){return+inp>+value},less_than:function(inp,value){return+inp<+value},alpha_dash:function(inp){return inp?/^[\w\-]+$/i.test(inp):true},alpha:function(inp){return inp?/^([a-z])+$/i.test(inp):true},alpha_numeric:function(inp){return inp?/^[a-z0-9]+$/i.test(inp):true},valid_email:function(inp){return inp?/^([\w\+\-]+)(\.[\w\+\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/i.test(inp):true},callback_domain_is_valid:function(inp){return inp?/^([a-z0-9]+)([\-\.]{1}[a-z0-9]+)*\.[a-z]+$/i.test(inp):true},callback_url_is_valid:function(inp){return inp?/^(http(s)?\:\/\/)([\w]+)([\-\.]{1}[\w]+)*\.[a-z]+([\w][\w\-\.]*[\/]?)+$/i.test(inp):true},callback_cron_jobs_selected_entire_time_is_valid:function(inp){return inp?/^(([\d\*\.\/]+),){4}([\d\*\.\/]+)$/.test(inp):true},callback_has_symbols:function(inp){return inp?/[\!\@\#\$\%\^\&\*\(\)\:\"\;\'\{\}\[\]\,\.\/<\>\?\`\~\\]/.test(inp):true},callback_has_capitals:function(inp){return inp?/[A-Z]/.test(inp):true},callback_has_numbers:function(inp){return inp?/[0-9]/.test(inp):true},callback_alpha_dash_dot:function(inp){return inp?/^[\w\-\.]+$/i.test(inp):true},callback_alpha_space:function(inp){return inp?/^([a-z\s])+$/i.test(inp):true},callback_valid_url_cron_jobs:function(inp){return inp?/^([a-z])([a-z0-9\/\_\-\?\=\&\.])*$/i.test(inp):true},callback_valid_path:function(inp){return inp?/^([\w][\w\-\.]*[\/]?)*$/.test(inp):true},callback_alpha_numeric_space:function(inp){return inp?/^[a-z0-9\s]+$/i.test(inp):true}}});
Validation.directive("validationRunAfter",function(){return{require:["form","validationRule"],link:function(scope,elem,attrs,ctrl){var validationRule=ctrl[1];var getFn=scope[attrs.validationRunAfter];validationRule.instance.runAfter(getFn)}}});Validation.directive("validationSubmit",function(){return{require:["^form"],link:function(scope,elem,attrs,ctrl){var config=attrs.validationSubmit.split(",");var validationSubmit=config[0];var resetOnSuccess=config[1];resetSubmit();elem.bind("click",runForm);function runForm(){ctrl[0].$submitInProgress=true;scope.$watch(validationSubmit,function(request){if(!request){throw new Error("Validation: validation-submit should be given a $resource or a $http instance that contains a promise")}var requestPromise=request.$promise||request;if(!(requestPromise&&requestPromise.then)){throw new Error("Validation: validation-submit instance should contain a promise")}if(resetOnSuccess){requestPromise.finally(resetSubmit)}else{requestPromise.catch(resetSubmit)}})}function resetSubmit(){ctrl[0].$submitInProgress=false}}}});Validation.directive("validationRule",function($compile,validation){return{require:["form"],controller:function($scope,$element,$attrs,validation){var ruleName=$attrs.validationRule;$scope.errorMsg={};if(!ruleName){throw new Error("Validation: validation rule not set")}if(!$attrs.name){throw new Error("Validation: name attribute not set on form")}var Instance=validation();return{instance:Instance,getRules:Instance.getRules(ruleName)}}}});Validation.directive("validate",function($compile,$log){return{require:["^validationRule","ngModel","^form"],link:function(scope,elem,attrs,ctrls){var name=attrs.name;var validationRule=ctrls[0];var ngModel=ctrls[1];var formInstance=ctrls[2];var isHidden;if(!name){throw new Error("Validation: name attribute not set on input")}ngModel.$setValidity(name,false);var errorContent=$compile(angular.element('<div ng-bind="errorMsg.'+name+'"></div>'))(scope);elem.tooltip({title:errorContent,html:true,placement:attrs.validate||"right"});function validateField(value){var fieldValidation=validationRule.instance.runValidation(name,value,formInstance);ngModel.$setValidity(name,fieldValidation.isValid);$log.debug("Validation:",name,value,fieldValidation.isValid);return fieldValidation}function parseField(value){var valid=validateField(value);scope.errorMsg[name]=valid.errorMsg;if(valid.isValid){elem.tooltip("hide");isHidden=true}else if(isHidden){elem.tooltip("show");isHidden=false}elem.toggleClass("validation-error",!valid.isValid);return valid.isValid?value:undefined}function formatField(value){var valid=validateField(value);return value}validationRule.getRules.then(function(){ngModel.$isEmpty=function(){};ngModel.$parsers=[parseField];ngModel.$formatters=[formatField];elem.on("mouseenter focus",function(){scope.$apply(read)})});function read(){ngModel.$setViewValue(ngModel.$viewValue)}}}});
Validation.value("appConfig",{validationUrl:"."});